{"version":3,"sources":["components/Navbar/index.jsx","components/NftCard/index.jsx","components/UserTools/index.jsx","components/Slot/index.jsx","waxjs/index.js","waxjs/api.js","waxlogo.png","App.js","reportWebVitals.js","index.js","components/NftCard/styles.module.css","components/UserTools/styles.module.css"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","Navbar","onLogin","user","classes","className","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","Button","onClick","NftCard","id","img","onCardClick","styles","cardContainer","style","display","src","alt","imgCard","SwiperCore","use","Navigation","Pagination","Scrollbar","A11y","UserTools","nfts","marginTop","paddingLeft","paddingRight","spaceBetween","centeredSlides","slidesPerView","navigation","onSlideChange","console","log","onSwiper","swiper","filter","schema","map","props","swapContainer","key","Slot","card","wax","waxjs","login","a","userAccount","setBag","items","api","transact","actions","account","name","authorization","actor","permission","data","blocksBehind","expireSeconds","result","getAssetData","assetId","fetch","response","json","template","immutable_data","schema_name","getNfts","ids","rowval","asset_id","Promise","allSettled","assetData","nftsData","value","Alert","elevation","App","React","useState","open","setOpen","setUser","setNfts","slots","setSlots","userName","userNfts","onSetBag","tools","item","some","toString","find","nft","findIndex","prev","copyPrev","prevIndex","gutterBottom","size","logo","slot","index","slotPosition","padding","margin","disableElevation","Snackbar","autoHideDuration","onClose","severity","textAlign","bottom","width","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.04f64c3d.chunk.js","sourcesContent":["import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport Button from \"@material-ui/core/Button\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nconst Navbar = ({ onLogin, user }) => {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"menu\"\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            Aliens Optimizer\n          </Typography>\n          {user ? (\n            <Typography variant=\"h6\">{user}</Typography>\n          ) : (\n            <Button onClick={onLogin} color=\"inherit\">\n              Login\n            </Button>\n          )}\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n};\n\nexport default Navbar;\n","import React from \"react\";\nimport styles from \"./styles.module.css\";\n\nconst NftCard = ({ id, img, onCardClick }) => {\n  return (\n    <div onClick={() => onCardClick(id)} className={styles.cardContainer}>\n      <p style={{ display: \"none\" }}>{id}</p>\n      <img\n        src={`https://ipfs.io/ipfs/${img}`}\n        alt=\"\"\n        className={styles.imgCard}\n      />\n    </div>\n  );\n};\n\nexport default NftCard;\n","// External import\nimport React from \"react\";\nimport SwiperCore, { Navigation, Pagination, Scrollbar, A11y } from \"swiper\";\nimport { Swiper, SwiperSlide } from \"swiper/react\";\nimport \"swiper/swiper.scss\";\nimport \"swiper/components/navigation/navigation.scss\";\nimport \"swiper/components/pagination/pagination.scss\";\nimport \"swiper/components/scrollbar/scrollbar.scss\";\n\n// Internal import\nimport NftCard from \"./../NftCard\";\nimport styles from \"./styles.module.css\";\n\nSwiperCore.use([Navigation, Pagination, Scrollbar, A11y]);\n\nconst UserTools = ({ nfts, onCardClick }) => {\n  return (\n    <Swiper\n      style={{ marginTop: \"1rem\", paddingLeft: \"20%\", paddingRight: \"20%\" }}\n      spaceBetween={1}\n      centeredSlides\n      slidesPerView={5}\n      navigation\n      onSlideChange={() => console.log(\"slide change\")}\n      onSwiper={swiper => console.log(swiper)}\n    >\n      {nfts\n        .filter(({ schema }) => schema === \"tool.worlds\")\n        .map(props => (\n          <SwiperSlide>\n            <div className={styles.swapContainer}>\n              <NftCard {...props} key={props.id} onCardClick={onCardClick} />\n            </div>\n          </SwiperSlide>\n        ))}\n    </Swiper>\n  );\n};\n\nexport default UserTools;\n","// External import\nimport React from \"react\";\n\n// Internal import\nimport NftCard from \"./../NftCard\";\n\nconst Slot = ({ card }) => {\n  return <div className=\"slot\">{card && <NftCard {...card} />}</div>;\n};\n\nexport default Slot;\n","import * as waxjs from \"@waxio/waxjs/dist\";\n\n// --\n// Initialize wax instance\nexport const wax = new waxjs.WaxJS(\n  \"https://wax.greymass.com\",\n  null,\n  null,\n  false\n);\n\n// --\n// Sugar to login\nexport const login = async () => {\n  await wax.login();\n\n  return wax.userAccount;\n};\n\n// --\n// Sugar to set bag in aliens world\nexport const setBag = async items => {\n  if (!wax || !wax.userAccount || !items) return null;\n\n  const result = await wax.api.transact(\n    {\n      actions: [\n        {\n          account: \"m.federation\",\n          name: \"setbag\",\n          authorization: [\n            {\n              actor: wax.userAccount,\n              permission: \"active\",\n            },\n          ],\n          data: {\n            account: wax.userAccount,\n            items,\n          },\n        },\n      ],\n    },\n    {\n      blocksBehind: 3,\n      expireSeconds: 1200,\n    }\n  );\n\n  return result;\n};\n","// --\n// Get asset data\nexport const getAssetData = async assetId => {\n  const response = await fetch(\n    `https://wax.api.atomicassets.io/atomicassets/v1/assets/${assetId}`\n  );\n\n  const json = await response.json();\n\n  return {\n    img: json.data.template.immutable_data.img,\n    schema: json.data.schema.schema_name,\n  };\n};\n\n//--\n// Get all NFTs that belongs to a given account\nexport const getNfts = async account => {\n  const response = await fetch(\n    `https://www.api.bloks.io/wax/nft?type=getAllNftsForAccount&network=wax&account=${account}`\n  );\n\n  const json = await response.json();\n  const ids = json.map(({ rowval }) => rowval.asset_id);\n\n  const nftsData = await Promise.allSettled(\n    ids.map(async id => {\n      const assetData = await getAssetData(id);\n      return {\n        ...assetData,\n        id,\n      };\n    })\n  );\n\n  return nftsData.map(result => result.value);\n};\n","export default __webpack_public_path__ + \"static/media/waxlogo.e8e1ea68.png\";","// External dependencies\nimport React, { useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport Typography from \"@material-ui/core/Typography\";\n\n// Internal depencies\nimport Navbar from \"./components/Navbar\";\nimport UserTools from \"./components/UserTools\";\nimport Slot from \"./components/Slot\";\nimport { login, setBag } from \"./waxjs\";\nimport { getNfts } from \"./waxjs/api\";\nimport logo from \"./waxlogo.png\";\nimport \"./App.css\";\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nfunction App() {\n  const [open, setOpen] = React.useState(false);\n\n  const [user, setUser] = useState(\"\");\n  const [nfts, setNfts] = useState([]);\n  const [slots, setSlots] = useState([\"\", \"\", \"\"]);\n\n  const onLogin = async () => {\n    const userName = await login();\n    const userNfts = await getNfts(userName);\n    setUser(userName);\n    setNfts(userNfts);\n  };\n\n  const onCardClick = id => {\n    const item = nfts.find(nft => nft.id == id);\n\n    const isExist = slots.findIndex(nft => nft && nft.id == id);\n    if (isExist !== -1) return;\n\n    setSlots(prev => {\n      const copyPrev = [...prev];\n      const prevIndex = copyPrev.findIndex(nft => !nft);\n      if (prevIndex !== -1) {\n        copyPrev[prevIndex] = item;\n      }\n\n      return copyPrev;\n    });\n  };\n\n  const onSetBag = async () => {\n    const tools = slots.map(item => item.id);\n    if (tools.some(id => !id)) {\n      return;\n    }\n\n    const result = await setBag(tools.map(id => id.toString()));\n    if (result) {\n      setOpen(true);\n    }\n  };\n\n  const clearAll = () => setSlots([\"\", \"\", \"\"]);\n\n  return (\n    <div>\n      <Navbar onLogin={onLogin} user={user} />\n      {!user ? (\n        <div className=\"bannerContainer\">\n          <Typography variant=\"h4\" gutterBottom>\n            Login to upload all your tools!\n          </Typography>\n          <Button\n            onClick={onLogin}\n            variant=\"outlined\"\n            size=\"large\"\n            color=\"primary\"\n          >\n            Login with <img src={logo} className=\"logo\" />\n          </Button>\n        </div>\n      ) : (\n        <UserTools nfts={nfts} onCardClick={onCardClick} />\n      )}\n      <div className=\"slotsContainer\">\n        {slots.map((slot, index) => (\n          <Slot\n            key={index.toString}\n            slotPosition={index}\n            nfts={nfts}\n            setSlots={setSlots}\n            card={slot}\n          />\n        ))}\n      </div>\n      <div className=\"buttonContainer\">\n        <Button\n          size=\"large\"\n          variant=\"outlined\"\n          onClick={clearAll}\n          style={{ padding: \"20px\", margin: \"20px\" }}\n        >\n          Clear all\n        </Button>\n        <Button\n          size=\"large\"\n          style={{ padding: \"20px\", margin: \"20px\" }}\n          onClick={onSetBag}\n          variant=\"contained\"\n          color=\"primary\"\n          disableElevation\n        >\n          Set bag\n        </Button>\n      </div>\n      <Snackbar\n        open={open}\n        autoHideDuration={6000}\n        onClose={() => setOpen(false)}\n      >\n        <Alert onClose={() => setOpen(false)} severity=\"success\">\n          Bag ready to use!!\n        </Alert>\n      </Snackbar>\n      <p\n        style={{\n          textAlign: \"center\",\n          position: \"absolute\",\n          bottom: 0,\n          width: \"100%\",\n        }}\n      >\n        <strong>Buy me a coffee:</strong> xvnba.wam\n      </p>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardContainer\":\"styles_cardContainer__uJDuM\",\"imgCard\":\"styles_imgCard__wjJrV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"swapContainer\":\"styles_swapContainer__5gvDT\"};"],"sourceRoot":""}